#!/usr/bin/php
<?php

#Script to catalog all translation packages into composer packages from wordpress.org api.
#In addition this looks up woocommerce translations from github

set_time_limit(3600);

$root = dirname(__DIR__);

#Use this file to build up satis
$satis_template_file = "{$root}/config/satis-template.json";
$satis_file = "{$root}/satis.json";
$satis_contents = file_get_contents($satis_template_file);
$satis = json_decode($satis_contents,true);

#File to act as poor man's database as a json file.
#This helps indexing the packages to be included only once
$packages_file = "{$root}/config/wp-packages.json";
$packages = json_decode(file_get_contents($packages_file),true);

#File to store language shortnames and their longer english names
$languages_file = "{$root}/config/languages-info.json";
$languages_info = json_decode(file_get_contents($languages_file),true);

function get_file_extension($file_name) {
  return substr(strrchr($file_name,'.'),1);
}

function get_json_url($url) {
  echo "Downloading json: {$url}\n";
  // set HTTP header
  $headers = array(
      'Content-Type: application/json',
  );

  // Open connection
  $ch = curl_init();

  // Set the url, number of GET vars, GET data
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_POST, false);
  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
  curl_setopt($ch, CURLOPT_USERAGENT,'Curl-bot for: languages.koodimonni.fi.');
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true );
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);

  // Execute request
  $result = curl_exec($ch);

  // Close connection
  curl_close($ch);

  // get the result and parse to JSON
  return json_decode($result, true);
}


#Lookup for latest wordpress versions
$wp_versions_json = get_json_url("https://api.wordpress.org/core/version-check/1.7/");
if (!$wp_versions_json) { exit(1); }
$wp_versions = array();
foreach ($wp_versions_json['offers'] as $key => $value) {
  echo "version:".$value['version']."\n";
  $wp_versions[] = $value['version'];
}
$wp_versions = array_unique($wp_versions);

#Gather data from core translation packages
foreach ($wp_versions as $version) {
  $version_languages = get_json_url("https://api.wordpress.org/translations/core/1.0/?version={$version}");
  foreach ($version_languages['translations'] as $language) {
    #Build up a unique helper listfiles
    $packages['packages']["wordpress-language"]['core'][strtolower($language['language'])][$language['version']] = array(
      "dist" => $language['package']
    );
  }
}

#Gather data for core plugins
$plugins = array("akismet","wordpress-importer");

$themes = array("twentyfourteen","twentythirteen","twentytwelve","twentyeleven","twentyfifteen");
$thirdparty_plugins = array("woocommerce");

$plugin_path = "https://api.wordpress.org/translations/plugins/1.0/?slug=";
$theme_path = "https://api.wordpress.org/translations/themes/1.0/?slug=";


foreach ($plugins as $plugin) {
  $plugin_languages = get_json_url("{$plugin_path}{$plugin}");
  foreach ($plugin_languages['translations'] as $language) {
    #Build up a unique helper listfiles
    $packages['packages']["wordpress-plugin-language"][$plugin][strtolower($language['language'])][$language['version']] = array(
      "dist" => $language['package']
    );
  }
}

foreach ($themes as $theme) {
  $theme_languages = get_json_url("{$theme_path}{$theme}");
  foreach ($theme_languages['translations'] as $language) {
    #Build up a unique helper listfiles
    $packages['packages']["wordpress-theme-language"][$theme][strtolower($language['language'])][$language['version']] = array(
      "dist" => $language['package']
    );
  }
}

###Woocommerce languages 
#github paths
$woocommerce_github = "woothemes/woocommerce-language-packs";
$woocommerce_files = get_json_url("https://api.github.com/repos/{$woocommerce_github}/contents/packages/");
$woocommerce_tags = get_json_url("https://api.github.com/repos/{$woocommerce_github}/tags");

#Add all github translation file versions from tags
foreach ($woocommerce_files as $file) {
  $language = basename($file['name'],".zip");
  foreach ($woocommerce_tags as $tag) {
    $packages['packages']["wordpress-plugin-language"]['woocommerce'][strtolower($language)][$tag['name']] = array(
      "dist" => "https://raw.githubusercontent.com/woothemes/woocommerce-language-packs/{$tag['commit']['sha']}/packages/{$file['name']}"
    );
  }
}

#Save new information if something fails later on
file_put_contents($packages_file, json_encode($packages,JSON_UNESCAPED_SLASHES|JSON_PRETTY_PRINT));

$repositories = array();
#Create new satis file from scraped information
foreach ($packages['packages'] as $type => $values) {
  foreach ($values as $block_name => $block ) {
    foreach ($block as $language => $offer ) {
      foreach ($offer as $version => $dist) {
        #Use different vendor names for different types
        switch ($type) {
          case 'wordpress-plugin-language':
            $vendor = "koodimonni-plugin-language";
            break;
          case 'wordpress-theme-language':
            $vendor = "koodimonni-theme-language";
            break;
          default:
            $vendor = "koodimonni-language";
            break;
        }
        $repositories[] = array(
          "type" => "package",
          "package" => array(
            "name" => "{$vendor}/{$block_name}-{$language}",
            "type" => "wordpress-language",
            "keywords" => array("Wordpress","Translation",$block_name,$language),
            "description" => "Wordpress {$block_name} translation for {$languages_info[$language]['english_name']} - {$language}",
            "version" => $version,
            "dist" => array(
              "url" => $dist['dist'],
              "type" => get_file_extension($dist['dist'])
            )
          )
        );
      }
    }
  }
}
#define require all packages from core packages
foreach ($packages['packages']["wordpress-language"]['core'] as $language => $offers) {
  foreach ($offers as $version => $dist) {
    $require_array = array(
              "koodimonni/composer-dropin-installer" => "*"
            );
    #add all required parts into require_array
    foreach (array_merge($plugins,$themes,$thirdparty_plugins) as $component) {

      if (isset($packages['packages']["wordpress-theme-language"][$component][$language]) && $packages['packages']["wordpress-theme-language"][$component][$language] != NULL) {
        $require_array["koodimonni-theme-language/{$component}-{$language}"] = "*";
      }elseif (isset($packages['packages']["wordpress-plugin-language"][$component][$language]) && $packages['packages']["wordpress-plugin-language"][$component][$language] != NULL ) {
        $require_array["koodimonni-plugin-language/{$component}-{$language}"] = "*";
      }else {
        //echo "OMITTING: {$component}-{$language} because doesn't exist! \n";
      }
    }
    $repositories[] = array(
      "type" => "package",
      "package" => array(
        "name" => "koodimonni-language/{$language}",
        "type" => "wordpress-language",
        "keywords" => array("Wordpress","Translation","Full-Package",$block_name,$language),
        "description" => "Full Wordpress translation (including themes and core plugins) for {$languages_info[$language]['english_name']} - {$language}",
        "version" => $version,
        "dist" => array(
          "url" => $dist['dist'],
          "type" => get_file_extension($dist['dist'])
        ),
        "require" => $require_array
      )
    ); 
  }
}
#merge arrays
$satis['repositories'] = $repositories;
echo "Repository count:".count($satis['repositories'])."\n";

#Save results and give to satis afterwise
file_put_contents($satis_file, json_encode($satis,JSON_UNESCAPED_SLASHES|JSON_PRETTY_PRINT));